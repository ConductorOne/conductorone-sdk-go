// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// C1APITaskV1TaskSearchRequestCurrentStep - The currentStep field.
type C1APITaskV1TaskSearchRequestCurrentStep string

const (
	C1APITaskV1TaskSearchRequestCurrentStepTaskSearchCurrentStepUnspecified C1APITaskV1TaskSearchRequestCurrentStep = "TASK_SEARCH_CURRENT_STEP_UNSPECIFIED"
	C1APITaskV1TaskSearchRequestCurrentStepTaskSearchCurrentStepApproval    C1APITaskV1TaskSearchRequestCurrentStep = "TASK_SEARCH_CURRENT_STEP_APPROVAL"
	C1APITaskV1TaskSearchRequestCurrentStepTaskSearchCurrentStepProvision   C1APITaskV1TaskSearchRequestCurrentStep = "TASK_SEARCH_CURRENT_STEP_PROVISION"
)

func (e C1APITaskV1TaskSearchRequestCurrentStep) ToPointer() *C1APITaskV1TaskSearchRequestCurrentStep {
	return &e
}

func (e *C1APITaskV1TaskSearchRequestCurrentStep) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TASK_SEARCH_CURRENT_STEP_UNSPECIFIED":
		fallthrough
	case "TASK_SEARCH_CURRENT_STEP_APPROVAL":
		fallthrough
	case "TASK_SEARCH_CURRENT_STEP_PROVISION":
		*e = C1APITaskV1TaskSearchRequestCurrentStep(v)
		return nil
	default:
		return fmt.Errorf("invalid value for C1APITaskV1TaskSearchRequestCurrentStep: %v", v)
	}
}

// C1APITaskV1TaskSearchRequestSortBy - The sortBy field.
type C1APITaskV1TaskSearchRequestSortBy string

const (
	C1APITaskV1TaskSearchRequestSortByTaskSearchSortByUnspecified  C1APITaskV1TaskSearchRequestSortBy = "TASK_SEARCH_SORT_BY_UNSPECIFIED"
	C1APITaskV1TaskSearchRequestSortByTaskSearchSortByAccount      C1APITaskV1TaskSearchRequestSortBy = "TASK_SEARCH_SORT_BY_ACCOUNT"
	C1APITaskV1TaskSearchRequestSortByTaskSearchSortByResource     C1APITaskV1TaskSearchRequestSortBy = "TASK_SEARCH_SORT_BY_RESOURCE"
	C1APITaskV1TaskSearchRequestSortByTaskSearchSortByAccountOwner C1APITaskV1TaskSearchRequestSortBy = "TASK_SEARCH_SORT_BY_ACCOUNT_OWNER"
)

func (e C1APITaskV1TaskSearchRequestSortBy) ToPointer() *C1APITaskV1TaskSearchRequestSortBy {
	return &e
}

func (e *C1APITaskV1TaskSearchRequestSortBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TASK_SEARCH_SORT_BY_UNSPECIFIED":
		fallthrough
	case "TASK_SEARCH_SORT_BY_ACCOUNT":
		fallthrough
	case "TASK_SEARCH_SORT_BY_RESOURCE":
		fallthrough
	case "TASK_SEARCH_SORT_BY_ACCOUNT_OWNER":
		*e = C1APITaskV1TaskSearchRequestSortBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for C1APITaskV1TaskSearchRequestSortBy: %v", v)
	}
}

type C1APITaskV1TaskSearchRequestTaskStates string

const (
	C1APITaskV1TaskSearchRequestTaskStatesTaskStateUnspecified C1APITaskV1TaskSearchRequestTaskStates = "TASK_STATE_UNSPECIFIED"
	C1APITaskV1TaskSearchRequestTaskStatesTaskStateOpen        C1APITaskV1TaskSearchRequestTaskStates = "TASK_STATE_OPEN"
	C1APITaskV1TaskSearchRequestTaskStatesTaskStateClosed      C1APITaskV1TaskSearchRequestTaskStates = "TASK_STATE_CLOSED"
)

func (e C1APITaskV1TaskSearchRequestTaskStates) ToPointer() *C1APITaskV1TaskSearchRequestTaskStates {
	return &e
}

func (e *C1APITaskV1TaskSearchRequestTaskStates) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TASK_STATE_UNSPECIFIED":
		fallthrough
	case "TASK_STATE_OPEN":
		fallthrough
	case "TASK_STATE_CLOSED":
		*e = C1APITaskV1TaskSearchRequestTaskStates(v)
		return nil
	default:
		return fmt.Errorf("invalid value for C1APITaskV1TaskSearchRequestTaskStates: %v", v)
	}
}

// C1APITaskV1TaskSearchRequest - The TaskSearchRequest message.
type C1APITaskV1TaskSearchRequest struct {
	// The accessReviewIds field.
	AccessReviewIds []string `json:"accessReviewIds,omitempty"`
	// The accountOwnerIds field.
	AccountOwnerIds []string `json:"accountOwnerIds,omitempty"`
	// The actorId field.
	ActorID *string `json:"actorId,omitempty"`
	// The appEntitlementIds field.
	AppEntitlementIds []string `json:"appEntitlementIds,omitempty"`
	// The appResourceIds field.
	AppResourceIds []string `json:"appResourceIds,omitempty"`
	// The appResourceTypeIds field.
	AppResourceTypeIds []string `json:"appResourceTypeIds,omitempty"`
	//  Find Tasks which are referncing a Set of AppUserIDs
	//
	AppUserSubjectIds []string `json:"appUserSubjectIds,omitempty"`
	// The applicationIds field.
	ApplicationIds []string `json:"applicationIds,omitempty"`
	//  Search tasks by  List of UserIDs which are currently assigned these Tasks
	//
	AssigneesInIds []string   `json:"assigneesInIds,omitempty"`
	CreatedAfter   *time.Time `json:"createdAfter,omitempty"`
	CreatedBefore  *time.Time `json:"createdBefore,omitempty"`
	// The currentStep field.
	CurrentStep *C1APITaskV1TaskSearchRequestCurrentStep `json:"currentStep,omitempty"`
	// The excludeAppEntitlementIds field.
	ExcludeAppEntitlementIds []string `json:"excludeAppEntitlementIds,omitempty"`
	//  Exclude Specific TaskIDs from this serach result.
	//
	ExcludeIds []string `json:"excludeIds,omitempty"`
	//  Make sure to update the TicketExpandMask
	//
	ExpandMask *C1APITaskV1TaskExpandMask `json:"expandMask,omitempty"`
	// The includeDeleted field.
	IncludeDeleted *bool `json:"includeDeleted,omitempty"`
	//  Search tasks by a List of UserIDs which are currently assigned to OR have previously acted upon this Task
	//
	MyWorkUserIds []string `json:"myWorkUserIds,omitempty"`
	//  Find a Task which was opened by UserIDs
	//
	OpenerIds []string `json:"openerIds,omitempty"`
	// The pageSize field.
	PageSize *float64 `json:"pageSize,omitempty"`
	// The pageToken field.
	PageToken *string `json:"pageToken,omitempty"`
	//  Search tasks by a  List of UserIDs which have previously approved or otherwise acted upon this Task
	//
	PreviouslyActedOnIds []string `json:"previouslyActedOnIds,omitempty"`
	// The query field.
	Query *string `json:"query,omitempty"`
	// The refs field.
	Refs []C1APITaskV1TaskRef `json:"refs,omitempty"`
	// The sortBy field.
	SortBy *C1APITaskV1TaskSearchRequestSortBy `json:"sortBy,omitempty"`
	//  Find Tasks which are referncing this C1 UserID
	//
	SubjectIds []string `json:"subjectIds,omitempty"`
	// The taskStates field.
	TaskStates []C1APITaskV1TaskSearchRequestTaskStates `json:"taskStates,omitempty"`
	//  TODO(pquerna): why is this a MESSAGE that only CONTAINS AN ENUM?
	//
	TaskTypes []C1APITaskV1TaskType `json:"taskTypes,omitempty"`
}
