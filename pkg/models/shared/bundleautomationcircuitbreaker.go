// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/conductorone/conductorone-sdk-go/pkg/utils"
	"time"
)

// BundleAutomationCircuitBreakerState - The state field.
type BundleAutomationCircuitBreakerState string

const (
	BundleAutomationCircuitBreakerStateCircuitBreakerStateUnspecified BundleAutomationCircuitBreakerState = "CIRCUIT_BREAKER_STATE_UNSPECIFIED"
	BundleAutomationCircuitBreakerStateCircuitBreakerStateTriggered   BundleAutomationCircuitBreakerState = "CIRCUIT_BREAKER_STATE_TRIGGERED"
	BundleAutomationCircuitBreakerStateCircuitBreakerStateBypass      BundleAutomationCircuitBreakerState = "CIRCUIT_BREAKER_STATE_BYPASS"
)

func (e BundleAutomationCircuitBreakerState) ToPointer() *BundleAutomationCircuitBreakerState {
	return &e
}

// The BundleAutomationCircuitBreaker message.
type BundleAutomationCircuitBreaker struct {
	// A reference to a user.
	UserRef *UserRef `json:"userRef,omitempty"`
	// The removedMembersThresholdPercentage field.
	RemovedMembersThresholdPercentage *int64 `integer:"string" json:"removedMembersThresholdPercentage,omitempty"`
	// The state field.
	State     *BundleAutomationCircuitBreakerState `json:"state,omitempty"`
	UpdatedAt *time.Time                           `json:"updatedAt,omitempty"`
}

func (b BundleAutomationCircuitBreaker) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BundleAutomationCircuitBreaker) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *BundleAutomationCircuitBreaker) GetUserRef() *UserRef {
	if o == nil {
		return nil
	}
	return o.UserRef
}

func (o *BundleAutomationCircuitBreaker) GetRemovedMembersThresholdPercentage() *int64 {
	if o == nil {
		return nil
	}
	return o.RemovedMembersThresholdPercentage
}

func (o *BundleAutomationCircuitBreaker) GetState() *BundleAutomationCircuitBreakerState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *BundleAutomationCircuitBreaker) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
