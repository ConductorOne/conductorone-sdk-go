// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type C1APITaskV1TaskActions string

const (
	C1APITaskV1TaskActionsTaskActionTypeUnspecified                   C1APITaskV1TaskActions = "TASK_ACTION_TYPE_UNSPECIFIED"
	C1APITaskV1TaskActionsTaskActionTypeClose                         C1APITaskV1TaskActions = "TASK_ACTION_TYPE_CLOSE"
	C1APITaskV1TaskActionsTaskActionTypeApprove                       C1APITaskV1TaskActions = "TASK_ACTION_TYPE_APPROVE"
	C1APITaskV1TaskActionsTaskActionTypeDeny                          C1APITaskV1TaskActions = "TASK_ACTION_TYPE_DENY"
	C1APITaskV1TaskActionsTaskActionTypeComment                       C1APITaskV1TaskActions = "TASK_ACTION_TYPE_COMMENT"
	C1APITaskV1TaskActionsTaskActionTypeDelete                        C1APITaskV1TaskActions = "TASK_ACTION_TYPE_DELETE"
	C1APITaskV1TaskActionsTaskActionTypeReassign                      C1APITaskV1TaskActions = "TASK_ACTION_TYPE_REASSIGN"
	C1APITaskV1TaskActionsTaskActionTypeRestart                       C1APITaskV1TaskActions = "TASK_ACTION_TYPE_RESTART"
	C1APITaskV1TaskActionsTaskActionTypeSendReminder                  C1APITaskV1TaskActions = "TASK_ACTION_TYPE_SEND_REMINDER"
	C1APITaskV1TaskActionsTaskActionTypeProvisionComplete             C1APITaskV1TaskActions = "TASK_ACTION_TYPE_PROVISION_COMPLETE"
	C1APITaskV1TaskActionsTaskActionTypeProvisionCancelled            C1APITaskV1TaskActions = "TASK_ACTION_TYPE_PROVISION_CANCELLED"
	C1APITaskV1TaskActionsTaskActionTypeProvisionErrored              C1APITaskV1TaskActions = "TASK_ACTION_TYPE_PROVISION_ERRORED"
	C1APITaskV1TaskActionsTaskActionTypeProvisionAppUserTargetCreated C1APITaskV1TaskActions = "TASK_ACTION_TYPE_PROVISION_APP_USER_TARGET_CREATED"
	C1APITaskV1TaskActionsTaskActionTypeRollbackSkipped               C1APITaskV1TaskActions = "TASK_ACTION_TYPE_ROLLBACK_SKIPPED"
	C1APITaskV1TaskActionsTaskActionTypeHardReset                     C1APITaskV1TaskActions = "TASK_ACTION_TYPE_HARD_RESET"
)

func (e C1APITaskV1TaskActions) ToPointer() *C1APITaskV1TaskActions {
	return &e
}

func (e *C1APITaskV1TaskActions) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TASK_ACTION_TYPE_UNSPECIFIED":
		fallthrough
	case "TASK_ACTION_TYPE_CLOSE":
		fallthrough
	case "TASK_ACTION_TYPE_APPROVE":
		fallthrough
	case "TASK_ACTION_TYPE_DENY":
		fallthrough
	case "TASK_ACTION_TYPE_COMMENT":
		fallthrough
	case "TASK_ACTION_TYPE_DELETE":
		fallthrough
	case "TASK_ACTION_TYPE_REASSIGN":
		fallthrough
	case "TASK_ACTION_TYPE_RESTART":
		fallthrough
	case "TASK_ACTION_TYPE_SEND_REMINDER":
		fallthrough
	case "TASK_ACTION_TYPE_PROVISION_COMPLETE":
		fallthrough
	case "TASK_ACTION_TYPE_PROVISION_CANCELLED":
		fallthrough
	case "TASK_ACTION_TYPE_PROVISION_ERRORED":
		fallthrough
	case "TASK_ACTION_TYPE_PROVISION_APP_USER_TARGET_CREATED":
		fallthrough
	case "TASK_ACTION_TYPE_ROLLBACK_SKIPPED":
		fallthrough
	case "TASK_ACTION_TYPE_HARD_RESET":
		*e = C1APITaskV1TaskActions(v)
		return nil
	default:
		return fmt.Errorf("invalid value for C1APITaskV1TaskActions: %v", v)
	}
}

// C1APITaskV1TaskProcessing - The processing field.
type C1APITaskV1TaskProcessing string

const (
	C1APITaskV1TaskProcessingTaskProcessingTypeUnspecified C1APITaskV1TaskProcessing = "TASK_PROCESSING_TYPE_UNSPECIFIED"
	C1APITaskV1TaskProcessingTaskProcessingTypeProcessing  C1APITaskV1TaskProcessing = "TASK_PROCESSING_TYPE_PROCESSING"
	C1APITaskV1TaskProcessingTaskProcessingTypeWaiting     C1APITaskV1TaskProcessing = "TASK_PROCESSING_TYPE_WAITING"
	C1APITaskV1TaskProcessingTaskProcessingTypeDone        C1APITaskV1TaskProcessing = "TASK_PROCESSING_TYPE_DONE"
)

func (e C1APITaskV1TaskProcessing) ToPointer() *C1APITaskV1TaskProcessing {
	return &e
}

func (e *C1APITaskV1TaskProcessing) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TASK_PROCESSING_TYPE_UNSPECIFIED":
		fallthrough
	case "TASK_PROCESSING_TYPE_PROCESSING":
		fallthrough
	case "TASK_PROCESSING_TYPE_WAITING":
		fallthrough
	case "TASK_PROCESSING_TYPE_DONE":
		*e = C1APITaskV1TaskProcessing(v)
		return nil
	default:
		return fmt.Errorf("invalid value for C1APITaskV1TaskProcessing: %v", v)
	}
}

// C1APITaskV1TaskState -  State
type C1APITaskV1TaskState string

const (
	C1APITaskV1TaskStateTaskStateUnspecified C1APITaskV1TaskState = "TASK_STATE_UNSPECIFIED"
	C1APITaskV1TaskStateTaskStateOpen        C1APITaskV1TaskState = "TASK_STATE_OPEN"
	C1APITaskV1TaskStateTaskStateClosed      C1APITaskV1TaskState = "TASK_STATE_CLOSED"
)

func (e C1APITaskV1TaskState) ToPointer() *C1APITaskV1TaskState {
	return &e
}

func (e *C1APITaskV1TaskState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TASK_STATE_UNSPECIFIED":
		fallthrough
	case "TASK_STATE_OPEN":
		fallthrough
	case "TASK_STATE_CLOSED":
		*e = C1APITaskV1TaskState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for C1APITaskV1TaskState: %v", v)
	}
}

// C1APITaskV1Task - The Task message.
type C1APITaskV1Task struct {
	// The actions field.
	Actions []C1APITaskV1TaskActions `json:"actions,omitempty"`
	// The analysisId field.
	AnalysisID *string `json:"analysisId,omitempty"`
	// The annotations field.
	Annotations []map[string]interface{} `json:"annotations,omitempty"`
	// The commentCount field.
	CommentCount *float64   `json:"commentCount,omitempty"`
	CreatedAt    *time.Time `json:"createdAt,omitempty"`
	// The createdByUserId field.
	CreatedByUserID *string    `json:"createdByUserId,omitempty"`
	DeletedAt       *time.Time `json:"deletedAt,omitempty"`
	// The description field.
	Description *string `json:"description,omitempty"`
	// The displayName field.
	DisplayName *string `json:"displayName,omitempty"`
	// The externalRefs field.
	ExternalRefs []C1APITaskV1ExternalRef `json:"externalRefs,omitempty"`
	//  General Metadata
	//
	ID *string `json:"id,omitempty"`
	// The numericId field.
	NumericID *string `json:"numericId,omitempty"`
	// The PolicyInstance message.
	Policy *C1APIPolicyV1PolicyInstance `json:"policy,omitempty"`
	// The processing field.
	Processing *C1APITaskV1TaskProcessing `json:"processing,omitempty"`
	//  State
	//
	State *C1APITaskV1TaskState `json:"state,omitempty"`
	// The stepApproverIds field.
	StepApproverIds []string `json:"stepApproverIds,omitempty"`
	// The TaskType message.
	//
	// This message contains a oneof named task_type. Only a single field of the following list may be set at a time:
	//   - grant
	//   - revoke
	//   - certify
	//
	Type      *C1APITaskV1TaskType `json:"type,omitempty"`
	UpdatedAt *time.Time           `json:"updatedAt,omitempty"`
	//  External IDS
	//
	UserID *string `json:"userId,omitempty"`
}
